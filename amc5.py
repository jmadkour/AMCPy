import streamlit as st
import pandas as pd
from io import BytesIO

# Fonction de traitement pour le fichier Excel
def process_excel(file):
    try:
        # Lire le fichier Excel sans header
        df = pd.read_excel(file, header=None)
        
        # Trouver l'index de la ligne d'en-t√™te
        header_index = next((idx for idx, row in df.iterrows() 
                             if all(col in row.values for col in ['Code', 'Nom', 'Pr√©nom'])), None)
        
        if header_index is None:
            st.error("Les colonnes 'Code', 'Nom', 'Pr√©nom' sont introuvables dans le fichier.")
            return None
        
        # Red√©finir les en-t√™tes et supprimer les lignes pr√©c√©dentes
        df.columns = df.iloc[header_index]
        df = df.iloc[header_index + 1:].reset_index(drop=True)
        
        # V√©rification si le fichier est vide apr√®s nettoyage
        if df.empty:
            st.error("Aucune donn√©e valide apr√®s le traitement des lignes.")
            return None
        
        # V√©rification des colonnes n√©cessaires (double v√©rification)
        required_columns = ['Nom', 'Pr√©nom', 'Code']
        missing = [col for col in required_columns if col not in df.columns]
        if missing:
            st.error(f"Colonnes manquantes apr√®s traitement : {', '.join(missing)}")
            return None
        
        # Aper√ßu des donn√©es
        st.write("Aper√ßu des donn√©es apr√®s traitement automatique :")
        st.write(df.head(10))
        
        # Nettoyage des donn√©es
        df = df.dropna(subset=['Nom', 'Pr√©nom', 'Code'])
        df['Name'] = df['Code'].astype(str) + ' ' + df['Nom'] + ' ' + df['Pr√©nom']
        df = df[['Code', 'Name']].drop_duplicates()
        return df
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.info("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None


# Fonction de traitement pour le fichier CSV
def process_csv(excel_file, csv_file):
    try:
        # Lire le fichier Excel sans header
        df_xls = pd.read_excel(excel_file, header=None)
        df_csv = pd.read_csv(csv_file, delimiter=';', encoding='utf-8')
        
        # Trouver l'index de la ligne d'en-t√™te
        header_index = next((idx for idx, row in df_xls.iterrows() 
                             if all(col in row.values for col in ['Code', 'Nom', 'Pr√©nom'])), None)
        
        if header_index is None:
            st.error("Les colonnes 'Code', 'Nom', 'Pr√©nom' sont introuvables dans le fichier.")
            return None, None
        
        # Red√©finir les en-t√™tes et supprimer les lignes pr√©c√©dentes
        df_xls.columns = df_xls.iloc[header_index]
        dm_xls = df_xls.iloc[:header_index]
        df_xls = df_xls.iloc[header_index + 1:].reset_index(drop=True)
        
        
        # V√©rification si le fichier est vide apr√®s nettoyage
        if df_xls.empty:
            st.error("Aucune donn√©e valide apr√®s le traitement des lignes.")
            return None, None
        
        # V√©rification des colonnes n√©cessaires (double v√©rification)
        required_columns = ['Nom', 'Pr√©nom', 'Code']
        missing = [col for col in required_columns if col not in df_xls.columns]
        if missing:
            st.error(f"Colonnes manquantes apr√®s traitement : {', '.join(missing)}")
            return None, None
        
        # Aper√ßu des donn√©es
        #st.write("Aper√ßu du fichier administraif nettoy√© :")
        #st.write(df_xls.head(10))

            
        # V√©rification des colonnes n√©cessaires
        required_columns = ['A:Code', 'Code', 'Note']
        missing_columns = [col for col in required_columns if col not in df_csv.columns]
        if missing_columns:
            st.error(f"Colonnes manquantes : {', '.join(missing_columns)}")
            return None, None
        
        # Initialiser un DataFrame pour les anomalies
        anomalies = pd.DataFrame()
        
        # 1. Filtrer les lignes avec 'NONE' ou valeurs vides
        df_csv = df_csv[['A:Code', 'Code', 'Nom', 'Note']]
        none_mask = (df_csv['A:Code'] == 'NONE') 
        anomalies = pd.concat([anomalies, df_csv[none_mask]])
        df_clean = df_csv[~none_mask].copy()
        
        # 2. V√©rifier la coh√©rence entre 'A:Code' et 'Code' converti
        df_clean['A:Code'] = pd.to_numeric(df_clean['A:Code'], errors='coerce')
        mismatch_mask = df_clean['A:Code'] != df_clean['Code']
        anomalies = pd.concat([anomalies, df_clean[mismatch_mask]])
        df_clean = df_clean[~mismatch_mask]
        
        # Sauvegarder les anomalies dans un fichier Excel
        if not anomalies.empty:
            anomalies_file = BytesIO()
            anomalies.to_excel(anomalies_file, index=False)
            anomalies_file.seek(0)
        else:
            anomalies_file = None
        
        # V√©rifier si le fichier nettoy√© est vide
        if df_clean.empty:
            st.error("Aucune donn√©e valide apr√®s le nettoyage !")
            return None, anomalies
        
        # Afficher un aper√ßu du fichier CSV apr√®s nettoyage
        st.write("Aper√ßu du fichier des notes nettoy√©:")
        st.write(df_clean.head(10))
    

        df_merged = pd.merge(df_xls, df_csv[['Code', 'Note']], on='Code', how='left')
        df_merged.rename(columns={'Note_y': 'Note'}, inplace=True)
        df_merged.drop(columns=['Note_x'], inplace=True)
        df_final = pd.concat([dm_xls, df_merged], axis=0)

        # Enregistrement du DataFrame fusionn√© dans le fichier Excel
        #output_excel_file = 'fusion.xlsx'
        #df_merged.to_excel(output_excel_file, index=False)

        
        # Aper√ßu des donn√©es
        st.write("Aper√ßu du fichier des notes apr√®s fusion :")
        st.write(df_merged.head(10))
        
        return df_final, anomalies
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.info("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None, None
    
# Interface utilisateur
st.title("Traitements de fichiers Excel et CSV pour AMC")

# Onglets pour s√©parer les sections
tab1, tab2 = st.tabs(["Liste des √©tudiants", "Traitement des notes"])

with tab1:
    st.header("Pr√©paration de la liste des √©tudiants")
    st.info("""
    - T√©l√©chargez un fichier Excel contenant les colonnes 'Nom', 'Pr√©nom' et 'Code'.
    - La d√©tection des en-t√™tes est automatique.
    - Les lignes avant les en-t√™tes seront automatiquement supprim√©es.
    """)
    
    uploaded_excel_file = st.file_uploader(
        "Chargez votre fichier Excel", 
        type="xlsx", 
        key="excel_uploader"
    )
    
    if uploaded_excel_file is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            processed_data = process_excel(uploaded_excel_file)
            
            if processed_data is not None:
                st.success(f"Lecture du fichier Excel r√©ussie ! {len(processed_data)} √©tudiants trouv√©s.")
                
                st.write('Voici un aper√ßu de la liste des √©tudiants:')
                st.write(processed_data.head(10))
                st.success(f"La liste contient {len(processed_data)} √©tudiants.")

                # Convertir le DataFrame en CSV
                csv = processed_data.to_csv(index=False)
                
                # Permettre le t√©l√©chargement du fichier CSV
                st.download_button(
                    label="T√©l√©charger la liste des √©tudiants au format CSV",
                    data=csv,
                    file_name="liste.csv",
                    mime="text/csv"
                )

with tab2:
    st.header("Traitement des notes")
    st.info("""
    - T√©l√©chargez un fichier CSV contenant les colonnes 'A:Code', 'Nom' et 'Note'.
    - Les anomalies seront export√©es dans un fichier Excel s√©par√©.
    - Les notes seront automatiquement associ√©es aux √©tudiants de l'onglet 1.
    """)

    uploaded_excel_file2 = st.file_uploader(
        "Chargez votre fichier Excel", 
        type="xlsx", 
        key="excel_uploader2"
    )

    if uploaded_excel_file2 is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            processed_data = process_excel(uploaded_excel_file2)
            
            if processed_data is not None:
                st.success(f"Le fichier Excel de l'administration contient {len(processed_data)} √©tudiants.")


    uploaded_csv_file = st.file_uploader(
        "Charger le fichier CSV des √©tudiants", 
        type="csv", 
        key="csv_uploader"
    )

    if uploaded_excel_file2 is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            processed_data = process_excel(uploaded_excel_file2)
            
            if processed_data is not None:
                st.success(f"{len(processed_data)} √©tudiants ont pass√© l'examen.")
    
    if uploaded_csv_file is not None and uploaded_excel_file2 is not None:
        with st.spinner("Int√©gration des notes aux √©tudiants..."):
            final_data, anomalies2 = process_csv(uploaded_excel_file2, uploaded_csv_file)
            
            if final_data is not None and anomalies2 is not None:
                st.success("Fusion r√©ussie !")
                
                # Afficher les statistiques
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("√âtudiants trouv√©s", len(final_data))
                with col2:
                    st.metric("Anomalies trouv√©es", len(anomalies2))
                
                # T√©l√©chargement des r√©sultats
                
                #st.download_button(
                #    label="üì• T√©l√©charger les donn√©es finales",
                #    data=final_data,#.to_csv(index=False, sep=';'),
                #    file_name="etudiants_avec_notes.xlsx",
                #    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"#"text/csv"
                #)
                
                
                #st.download_button(
                #    label="üö® T√©l√©charger les anomalies",
                #    data=anomalies2,
                #    file_name="anomalies.xlsx",
                #    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                #)
                
                
                # Aper√ßu interactif
                
                #with st.expander("Aper√ßu des donn√©es fusionn√©es"):
                #    st.dataframe(final_data.style.highlight_null(color='#FF6666'))
                
